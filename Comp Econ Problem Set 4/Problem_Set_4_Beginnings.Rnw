\documentclass{article}

\title{Problem Set 1}
\author{Tony Lashley}
\date{April 30, 2015}

\usepackage{mathtools}
\usepackage{graphicx}
\usepackage{dcolumn}

\begin{document}

\section{Function Approximation Warmup}
\subsection{Exploring and downloading the data}

<<>>==

rm(list=ls())           # Clear the workspace
set.seed(20866) 
library(ggplot2)
library(sandwich)
library(car)
library(xtable)
library(aod)
library(systemfit)
library(MASS)
library(stargazer)

setwd("/Users/Tony/Downloads")

data <- read.csv("cps_00005.csv")
datamatrix <- as.matrix(read.csv("cps_00005.csv"))
datamatrix <- datamatrix[,-5:-8]
datamatrix <- datamatrix[,-2:-3]


datamatrix <- datamatrix[datamatrix[,9]!= 0,]
datamatrix <- datamatrix[datamatrix[,9]!= 9999999,]



incomeadjust <- function(data.m = datamatrix, sampq = TRUE){

  AdjInc <- c(rep(NA, nrow(data.m)))
  data.m <- cbind(data.m, AdjInc)
  
  for (i in 1:nrow(datamatrix)){
    
    year <- as.numeric(data.m[i,1])
    income <- as.numeric(data.m[i,9])
    
    if (year == 2004){
      
      AdjustedIncome <- income * 1.25
      data.m[i,10] = round(AdjustedIncome)
    }
    
    if (year == 2014){
      
      AdjustedIncome <- income
      data.m[i,10] = round(AdjustedIncome)
    }
    
    
  }
  
 if (sampq == TRUE){
  top <- head(data.m, n=15)
  bottom<- tail(data.m, n=15)
  
  sample <- rbind(top,bottom)
  row.names(sample) <- NULL
  return(sample)
  
 }
 
 if (sampq == FALSE){
   return(data.m)
 }
}

incomeadjust(datamatrix, TRUE)

@

To find the CPI, I used the Bureau of Labor Statistics CPI Inflation Calculator, which told me that a dollar in 2004 has the same buying power as $1.25 in 2014. Therefore, to adjust 2004 income to its 2014 equivalent, I wrote a function that multiplied all 2004 incomes by $1.25.

\subsection{Make a new variable that is log wage income in your data}

<<>>==

testdata <- incomeadjust(datamatrix, TRUE) 

logVarf <- function(data.m = testdata){
  
  logInc <- c(rep(NA, nrow(data.m)))
  data.m <- cbind(data.m, logInc)
  
  for (i in 1:nrow(data.m)){
    
    rowIncomeLog <- log(data.m[i,10]) 
    data.m[i,11] <- rowIncomeLog
    
  }  
  
  ## return(datamatrix) Commenting out so it doesn't actually return this
  return(data.m)
  
}

logVarf(testdata)

@

\subsection{Construct "potential experience", which will be "Age - years of schooling - 5"}

<<>>==

sample <- logVarf(testdata)

potExpf <- function(data.m = testdata){
  
  potExp <- c(rep(NA, nrow(data.m)))
  YrsOfSch <- c(rep(NA, nrow(data.m)))
  data.m <- cbind(data.m, potExp, YrsOfSch)
  
  for (i in 1:nrow(data.m)){
    
    indAge = as.numeric(data.m[i,3])
    indEduCode = as.numeric(data.m[i,6])
    
    if (indEduCode < 6){
      indYrsOfSch = 9
      indPotExp = indAge - indYrsOfSch - 5
      data.m[i,12] = indPotExp
      data.m[i,13] = indYrsOfSch
      
    }
    
    if (indEduCode == 6){
      indYrsOfSch = 10
      indPotExp = indAge - indYrsOfSch - 5
      data.m[i,12] = indPotExp
      data.m[i,13] = indYrsOfSch
      
    }
    
    if (indEduCode == 7){
      indYrsOfSch = 11
      indPotExp = indAge - indYrsOfSch - 5
      data.m[i,12] = indPotExp
      data.m[i,13] = indYrsOfSch
      
    }
    
    if (indEduCode == 8){
      indYrsOfSch = 12
      indPotExp = indAge - indYrsOfSch - 5
      data.m[i,12] = indPotExp
      data.m[i,13] = indYrsOfSch
      
    }
    
    if (indEduCode == 9){
      indYrsOfSch = 13
      indPotExp = indAge - indYrsOfSch - 5
      data.m[i,12] = indPotExp
      data.m[i,13] = indYrsOfSch
      
    }
    
    if (indEduCode == 10){
      indYrsOfSch = 13
      indPotExp = indAge - indYrsOfSch - 5
      data.m[i,12] = indPotExp
      data.m[i,13] = indYrsOfSch
      
    }
    
    if (indEduCode == 11){
      indYrsOfSch = 14
      indPotExp = indAge - indYrsOfSch - 5
      data.m[i,12] = indPotExp
      data.m[i,13] = indYrsOfSch
      
    }
    
    if (indEduCode == 12){
      indYrsOfSch = 15
      indPotExp = indAge - indYrsOfSch - 5
      data.m[i,12] = indPotExp
      data.m[i,13] = indYrsOfSch
      
    }
    
    if (indEduCode == 13){
      indYrsOfSch = 15
      indPotExp = indAge - indYrsOfSch - 5
      data.m[i,12] = indPotExp
      data.m[i,13] = indYrsOfSch
      
    }
    
    if (indEduCode == 14){
      indYrsOfSch = 15
      indPotExp = indAge - indYrsOfSch - 5
      data.m[i,12] = indPotExp
      data.m[i,13] = indYrsOfSch
      
    }
    
    if (indEduCode == 15){
      indYrsOfSch = 17
      indPotExp = indAge - indYrsOfSch - 5
      data.m[i,12] = indPotExp
      data.m[i,13] = indYrsOfSch
      
    }
    
    if (indEduCode == 16){
      indYrsOfSch = 19
      indPotExp = indAge - indYrsOfSch - 5
      data.m[i,12] = indPotExp
      data.m[i,13] = indYrsOfSch
      
    }
    
    if (indEduCode == 17){
      indYrsOfSch = 19
      indPotExp = indAge - indYrsOfSch - 5
      data.m[i,12] = indPotExp
      data.m[i,13] = indYrsOfSch
      
    }
    
    if (indEduCode == 18){
      indYrsOfSch = 22
      indPotExp = indAge - indYrsOfSch - 5
      data.m[i,12] = indPotExp
      data.m[i,13] = indYrsOfSch
      
    }
    
  }  
  
  ## return(datamatrix) Commenting out so it doesn't actually return this
  return(data.m)
  
}

potExpf(sample)

@

\subsection{Make a table comparing the following regressions for 2014 and 2014}

<<size='tiny'>>==

library(stargazer)

regData <- incomeadjust(datamatrix, FALSE)
regData <- logVarf(regData)
regData <- potExpf(regData)

regData <- as.data.frame(regData)

data04 <- regData[regData[,1]== 2004,]
data14 <- regData[regData[,1]== 2014,]
data04m <- data04[data04[,4]== 1,]
data04f <- data04[data04[,4]== 2,]
data14m <- data14[data14[,4]== 1,]
data14f <- data14[data14[,4]== 2,]

fit04 <- lm(data04$logInc ~ data04$YrsOfSch + data04$potExp 
          + I(data04$potExp^2), data=data04 )

fit04m <- lm(data04m$logInc ~ data04m$YrsOfSch + data04m$potExp 
          + I(data04m$potExp^2), data=data04m )

fit04f <- lm(data04f$logInc ~ data04f$YrsOfSch + data04f$potExp 
          + I(data04f$potExp^2), data=data04f )

fit14 <- lm(data14$logInc ~ data14$YrsOfSch + data14$potExp 
          + I(data14$potExp^2), data=data14 )

fit14m <- lm(data14m$logInc ~ data14m$YrsOfSch + data14m$potExp 
          + I(data14m$potExp^2), data=data14m )

fit14f <- lm(data14f$logInc ~ data14f$YrsOfSch + data14f$potExp 
          + I(data14f$potExp^2), data=data14f)


stargazer(fit04, fit04m, fit04f)
stargazer(fit14, fit14m, fit14f)

@

\begin{table}[!htbp] \centering
  \caption{}
  \label{}
\begin{tabular}{@{\extracolsep{5pt}}lccc}
\\[-1.8ex]\hline
\hline \\[-1.8ex]
 & \multicolumn{3}{c}{\textit{Dependent variable:}} \\
\cline{2-4}
\\[-1.8ex] & logInc & logInc & logInc \\
\\[-1.8ex] & (1) & (2) & (3)\\
\hline \\[-1.8ex]
 YrsOfSch & 0.163$^{***}$ & 0.160$^{***}$ & 0.171$^{***}$ \\
  &(0.001)& (0.002)& (0.002)\\
  & & & \\
 potExp & 0.106$^{***}$ & 0.120$^{***}$ & 0.091$^{***}$ \\
  &(0.001)& (0.001)& (0.001)\\
  & & & \\
 potExp$\hat{\mkern6mu}$2 & $-$0.002$^{***}$ & $-$0.002$^{***}$ & $-$0.002$^{***}$ \\
  & (0.00002) & (0.00002) & (0.00002) \\
  & & & \\
 Constant & 6.719$^{***}$ & 6.869$^{***}$ & 6.501$^{***}$ \\
  & (0.019) & (0.024) & (0.030) \\
  & & & \\
\hline \\[-1.8ex]
Observations & 103,084 & 52,848 & 50,236 \\
R$^{2}$ & 0.310 & 0.385 & 0.266 \\
Adjusted R$^{2}$ & 0.310 & 0.385 & 0.266 \\
Residual Std. Error & 1.026 (df = 103080) & 0.942 (df = 52844) & 1.045 (df = 50232) \\
F Statistic & 15,448.400$^{***}$ (df = 3; 103080) & 11,041.710$^{***}$ (df = 3; 52844) & 6,081.976$^{***}$ (df = 3; 50232) \\
\hline
\hline \\[-1.8ex]
\textit{Note:} & \multicolumn{3}{r}{$^{*}$p$<$0.1; $^{**}$p$<$0.05; $^{***}$p$<$0.01} \\
\end{tabular}
\end{table}

 
 
 
  
 
  
 





 

  

 
 
 




\end{document}